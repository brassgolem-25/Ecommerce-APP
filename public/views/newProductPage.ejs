<%- include('newHeader'); -%>
	<%const productName=product.name ; const description=product.description;const price=product.price;const
		oldPrice=price + 20; const imageUrl=product.imageUrl; %>
		<div class="container product-container">
			<div class="row">
				<div class="col-md-6">
					<div class="productPage item">
						<img src="<%=imageUrl%>" />
					</div>
				</div>
				<div class="col-md-6">
					<div class="product-dtl">
						<div class="product-info">
							<div class="product-name">
								<%=productName%>
							</div>
							<div class="product-price-discount"><span>$<%=price%></span><span class="line-through">$
									<%=oldPrice%>
								</span></div>
						</div>
						<p>
							<%=description%>.
						</p>
						<div class="row">
							<div class="col-md-6">
								<label for="size">Size</label>
								<select id="size" name="size" class="form-select">
									<option>S</option>
									<option>M</option>
									<option>L</option>
									<option>XL</option>
								</select>
							</div>
							<div class="col-md-6">
								<label for="color">Color</label>
								<select id="color" name="color" class="form-select">
									<option>Blue</option>
									<option>Green</option>
									<option>Red</option>
								</select>
							</div>
						</div>
						<div class="product-count">
							<label for="size">Quantity</label>
							<form class="display-flex">
								<div class="qtyminus">-</div>
								<input id="productQuantity" type="text" name="quantity" value="1" class="qty">
								<div class="qtyplus">+</div>
							</form>
							<a href="" id="addToCart" data-product-name="<%=productName%>" class="round-Cart-btn">Add to
								Cart</a>
							<a id="buyNowProduct" data-product-name="<%=productName%>" data-product-cost="<%=price%>"
								class="round-black-btn">Buy Now</a>
						</div>
						<div class="delivery-check">
							<label for="pincode">Deliver to <i class="fa-solid fa-location-dot"
									style="color: #dd0808;"></i></label>
							<div class="input-group">
								<input type="text" id="pincode" name="pincode" class="form-control"
									placeholder="Enter your pincode">
								<div class="input-group-append">
									<button id="checkDelivery" class="round-black-btn">Check</button>
								</div>
							</div>
							<div id="deliveryResult" class="mt-2"></div>
						</div>

					</div>
				</div>
			</div>
			<div class="product-info-tabs">
				<ul class="nav nav-tabs" id="myTab" role="tablist">
					<li class="nav-item">
						<a class="nav-link active" id="description-tab" data-bs-toggle="tab" href="#description"
							role="tab" aria-controls="description" aria-selected="true">Description</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" id="review-tab" data-toggle="tab" href="#review" role="tab"
							aria-controls="review" aria-selected="false">Reviews (0)</a>
					</li>
				</ul>
				<div class="tab-content" id="myTabContent">
					<div class="tab-pane fade show active" id="description" role="tabpanel"
						aria-labelledby="description-tab">
						<%=description%>.
					</div>
					<div class="tab-pane fade" id="review" role="tabpanel" aria-labelledby="review-tab">
						<div class="review-heading">REVIEWS</div>
						<p class="mb-20">There are no reviews yet.</p>
						<form class="review-form">
							<div class="form-group">
								<label>Your rating</label>
								<div class="reviews-counter">
									<div class="rate">
										<input type="radio" id="star5" name="rate" value="5" />
										<label for="star5" title="text">5 stars</label>
										<input type="radio" id="star4" name="rate" value="4" />
										<label for="star4" title="text">4 stars</label>
										<input type="radio" id="star3" name="rate" value="3" />
										<label for="star3" title="text">3 stars</label>
										<input type="radio" id="star2" name="rate" value="2" />
										<label for="star2" title="text">2 stars</label>
										<input type="radio" id="star1" name="rate" value="1" />
										<label for="star1" title="text">1 star</label>
									</div>
								</div>
							</div>
							<div class="form-group">
								<label>Your message</label>
								<input type="text" name="" class="form-control" placeholder="Review">
							</div>
							<!-- <div class="row">
				        		<div class="col-md-6">
				        			<div class="form-group">
					        			<input type="text" name="" class="form-control" placeholder="Name*">
					        		</div>
					        	</div>
				        		<div class="col-md-6">
				        			<div class="form-group">
					        			<input type="text" name="" class="form-control" placeholder="Email Id*">
					        		</div>
					        	</div>
					        </div> -->
							<button class="round-black-btn">Submit Review</button>
						</form>
					</div>
				</div>
			</div>

		</div>
		</div>

		<!-- Payment Page -->
		<!-- Payment Modal -->
		<div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
					<!-- Progress Bar -->
					<div class="progress-container">
						<div class="progress" id="progress"></div>
						<div class="text-wrap active">
							<div class="circle">1</div>
							<p class="text">Amount</p>
						</div>
						<div class="text-wrap">
							<div class="circle">2</div>
							<p class="text">Address</p>
						</div>
						<div class="text-wrap">
							<div class="circle">3</div>
							<p class="text">Payment</p>
						</div>
						<div class="text-wrap">
							<div class="circle">4</div>
							<p class="text">Review</p>
						</div>
					</div>

					<!-- Steps Content -->
					<div class="steps-content">
						<!-- Step 1: Checkout -->
						<div class="step-content active" id="checkoutStep">
							<h5 class="modal-title">Checkout</h5>
							<div class="mb-3">
								<label for="totalAmount" class="form-label">Total Amount</label>
								<input type="text" class="form-control" id="totalAmount" value="$<%=price%>" readonly>
							</div>
							<button class="btn btn-primary next-btn" data-next-step="addressStep">Next</button>
						</div>

						<!-- Step 2: Shipping Address -->
						<div class="step-content" id="addressStep">
							<h5 class="modal-title">
								Shipping Address
								<img src="../images/edit.png" class="addressContentImg editImg">
								<img src="../images/checked.png" class="addressContentImg saveImg">
							</h5>
							<div class="mb-3">
								<label for="locality">Locality</label>
								<input type="text" class="form-control" id="locality" placeholder="Enter your locality"
									disabled>
							</div>
							<div class="mb-3">
								<label for="state">State</label>
								<input type="text" class="form-control" id="state" placeholder="Enter your state"
									disabled>
							</div>
							<div class="mb-3">
								<label for="pincode">Pincode</label>
								<input type="text" class="form-control" id="userPincode"
									placeholder="Enter your pincode" disabled>
							</div>
							<button class="btn btn-secondary prev-btn" data-prev-step="checkoutStep">Back</button>
							<button class="btn btn-primary next-btn" data-next-step="paymentStep">Next</button>
						</div>

						<!-- Step 3: Payment -->
						<div class="step-content" id="paymentStep">
							<h5 class="modal-title">Payment</h5>
							<div class="payment-loader">
								<div class="pad">
									<div class="chip"></div>
									<div class="line line1"></div>
									<div class="line line2"></div>
								</div>
								<div class="loader-text">
									Please wait while payment is loading
								</div>
							</div>
							<div class="complete-payment" style="display: none;">
								<div class="spinner"></div>
								<div class="loader-text">Please complete the payment in the next page</div>
							</div>
							<div class="payment-completed" style="display: none;">
								<i class="fa fa-check-circle" style="color: #57e55c;font-size: 3em;"></i>
								<h2>Payment Completed</h2>
							</div>
							<div class="payment-failed" style="display: none;">
								<h2>Payment Failed</h2>
								<i class="fa-solid fa-circle-exclamation" style="color: #f0430a;font-size: 3em; "></i>
							</div>
							<button class="btn btn-secondary prev-btn " data-prev-step="addressStep"
								disabled>Back</button>
						</div>

						<!-- Step 4: Track Order -->
						<div class="step-content" id="trackingStep">
							<h5 class="modal-title">Order Confirmed</h5>
							<div class="container	 d-flex justify-content-center">
								<div class="order-card p-4 mt-3">
									<div class="first d-flex justify-content-between align-items-center mb-3">
										<div class="info">
											<span class="d-block name">Thank you </span>
											<span id="orderNumber" class="order"></span>

										</div>

										<img src="https://i.imgur.com/NiAVkEw.png" width="40" />


									</div>
									<div class="detail">
										<span class="d-block summery">Your order has been confirmed.</span>
									</div>
									<hr>
									<div class="text">
										<span id="userName" class="d-block new mb-1">Alex Dorlew</span>
									</div>
									<span id="userAddress" class="d-block address mb-3">672 Conaway Street Bryantiville
										Massachusetts 02327</span>
									<div class="  money d-flex flex-row mt-2 align-items-center">
										<img id="paymentTypeImg" src="../images/mastercard.jpg" width="40" />

										<span id="paymentMethod" class="ml-2"></span>

									</div>
								</div>
							</div>
							<button class="btn btn-primary close-btn" data-bs-dismiss="modal">Close</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- <script src="../script/productPageScript.js"></script> -->
		<script>
			//
			const qtyInputs = document.querySelectorAll('.qty');
			let productQuantity = 1;
			qtyInputs.forEach(qtyInput => {
				const totalAmountInput = document.getElementById('totalAmount').value;
				const totalAmount = parseFloat(totalAmountInput.substr(1));
				let newAmount = totalAmount;
				const qtyMinus = qtyInput.parentElement.querySelector('.qtyminus');
				const qtyPlus = qtyInput.parentElement.querySelector('.qtyplus');

				qtyMinus.addEventListener('click', function () {
					let qty = parseInt(qtyInput.value);
					if (qty > 1) {
						qtyInput.value = qty - 1;
						productQuantity=qtyInput.value;
					}
					newAmount = totalAmount * (qtyInput.value);
					document.getElementById('totalAmount').value = `$${newAmount.toFixed(2)}`
				});

				qtyPlus.addEventListener('click', function () {
					let qty = parseInt(qtyInput.value);
					qtyInput.value = qty + 1;
					productQuantity=qtyInput.value;
					newAmount = totalAmount * (qtyInput.value);
					document.getElementById('totalAmount').value = `$${newAmount.toFixed(2)}`
				});

			});




			const validateUserPincode = document.getElementById('checkDelivery');
			validateUserPincode.addEventListener('click', () => {
				const userPincode = document.getElementById('pincode').value;
				const deliveryResult = document.getElementById('deliveryResult');
				// console.log(userPincode.length)
				if (userPincode.length < 6) {
					setTimeout(() => {
						deliveryResult.innerHTML = 'Please type Correct Pincode';
					}, 1000);
				} else {
					setTimeout(() => {
						deliveryResult.innerHTML = 'The Product will ship within 2-3 days';
					}, 1000);
				}
				deliveryResult.innerHTML = '';

			})

			const reviewTab = document.getElementById('review-tab');
			const descriptionTab = document.getElementById('description-tab')
			const reviewForm = document.getElementById('review')
			const description = document.getElementById('description')

			reviewTab.addEventListener('click', () => {
				reviewForm.classList.add('show');
				reviewForm.classList.add('active');

				description.classList.remove('show');
				description.classList.remove('active');

			})

			descriptionTab.addEventListener('click', () => {
				reviewForm.classList.remove('show');
				reviewForm.classList.remove('active');

				description.classList.add('show');
				description.classList.add('active');
			})

			//toastify
			const displayToastify = (message) => {
				Toastify({
					text: message,
					duration: 2000,
					close: true,
					gravity: "top",
					position: "center",
					stopOnFocus: true,
					style: {
						background: "#FF4500",
					}
				}).showToast();
			}

			//user login?
			const isUserLoggedIn = document.cookie.includes('uid') ? true : false;
			//Payment Page Script
			const nextButtons = document.querySelectorAll('.next-btn');
			const prevButtons = document.querySelectorAll('.prev-btn');
			const dots = document.querySelectorAll('.progress-dot');
			const progress = document.getElementById('progress')
			const wraps = document.querySelectorAll('.text-wrap')

			let currentActive = 1

			nextButtons.forEach(button => {
				button.addEventListener('click', async function () {
					const currentStep = button.closest('.step-content');
					const nextStepId = button.getAttribute('data-next-step');
					const nextStep = document.getElementById(nextStepId);
					console.log(currentStep);
					currentActive++;
					if (currentActive > wraps.length) {
						currentActive = wraps.length
					}

					const editContent = document.querySelector('.editImg');
					const saveContent = document.querySelector('.saveImg');
					let toggleEditClick = false;

					editContent.addEventListener('click', () => {
						if (!toggleEditClick) {
							toggleEditClick = true
							editContent.src = '../images/close-Icon.png'
							saveContent.style.display = 'block';
							document.getElementById('locality').disabled = false;
							document.getElementById('state').disabled = false;
							document.getElementById('userPincode').disabled = false;
						} else {
							toggleEditClick = false;
							editContent.src = '../images/edit.png'
							saveContent.style.display = 'none';
							document.getElementById('locality').disabled = true;
							document.getElementById('state').disabled = true;
							document.getElementById('userPincode').disabled = true;
						}

					})

					const fetchUserAddress = async () => {
						const fetchClientAddress = await fetch('/Account/address',{
							method:"POST",
							body : JSON.stringify(

							)
						});
						const clientAddressJson = await fetchClientAddress.json();
						// console.log(clientAddressJson)
						if (clientAddressJson.success) {
							document.getElementById('locality').value = clientAddressJson.userAddress.locality
							document.getElementById('state').value = clientAddressJson.userAddress.state
							document.getElementById('userPincode').value = clientAddressJson.userAddress.pincode;
						}
					}


					saveContent.addEventListener('click', () => {

						const addressInputs = document.querySelectorAll('#addressStep input')
						let valid = true;
						addressInputs.forEach((input) => {
							if ((input.id === 'userPincode' && !/^\d{6}$/.test(input.value)) || (input.id === 'state' && input.value.trim() === '')) {
								input.classList.add('is-invalid');
								valid = false;
							} else {
								console.log("inside here")
								input.classList.remove('is-invalid');
							}
						})

						if (valid) {
							document.getElementById('locality').disabled = true;
							document.getElementById('state').disabled = true;
							document.getElementById('userPincode').disabled = true;
							editContent.src = '../images/edit.png'
							saveContent.style.display = 'none';
						}



					})
					if (nextStepId === 'addressStep') {
						fetchUserAddress();
					}

					//check if current Step is address then validate address
					if (currentStep.id === 'addressStep') {

						// console.log(editContent);
						const locality = document.getElementById('locality').value;
						const state = document.getElementById('state').value;
						const userPincode = document.getElementById('userPincode').value;


						if (!locality || !state || !userPincode) {
							//show toastify
							displayToastify("Please fill all the Details")
							return;
						}
						try {
							const response = fetch('/Account/userAddress', {
								method: "POST",
								headers: {
									'Content-Type': 'application/json'
								},
								body: JSON.stringify({
									locality: locality,
									state: state,
									userPincode: userPincode
								})
							})
							const result = await response;
							console.log(result);
							if (result.success) {
								currentStep.classList.remove('active');
								nextStep.classList.add('active');
								update();
							}
						} catch (error) {
							console.log(error);
						}

					}

					if (nextStepId === 'paymentStep') {
						// const payNowButton = document.getElementById('pay-now-button');
						const paymentLoader = document.querySelector('.payment-loader');
						const completePayment = document.querySelector('.complete-payment');
						const paymentCompleted = document.querySelector('.payment-completed');
						const paymentFailed = document.querySelector('.paymentFailed');

						const nextBtn = document.querySelector('.next-btn[data-next-step="paymentStep"]');
						const productName = document.getElementById("buyNowProduct").getAttribute('data-product-name');
						const productQuantity = document.getElementById("productQuantity").value;
						console.log(productQuantity);

						const cost = document.getElementById("buyNowProduct").getAttribute('data-product-cost')
						if (isUserLoggedIn) {
							const response = await fetch('/product/processPayment', {
								method: "POST",
								headers: {
									'Content-Type': 'application/json'
								},
								body: JSON.stringify({
									productName: productName,
									cost: cost,
									quantity:productQuantity
								})
							})
							const result = await response.json();
							console.log(result);
							if (result.success) {
								displayToastify(result.message);
								const redirectUrl = result.url;
								const clientordNumber = result.clientordNumber;
								//for redirecting to order Page
								const checkPaymentStatus = async () => {
									try {
										const paymentStatus = await fetch('/payment/paymentStatus', {
											method: "POST",
											headers: {
												'Content-Type': 'application/json'
											},
											body: JSON.stringify({
												orderNumber: clientordNumber,
											})
										});

										const paymentStatusJson = await paymentStatus.json();
										console.log("Payment Status:", JSON.stringify(paymentStatusJson));

										if (paymentStatusJson.isPaymentCompleted) {
											completePayment.style.display = 'none';
											paymentCompleted.style.display = 'block';
											const clientPaymentMethod = paymentStatusJson.paymentMethod;

											setTimeout(async () => {
												paymentCompleted.style.display = 'none';
												update();
												document.getElementById('trackingStep').style.display = 'block';
												updateReviewStep(clientordNumber, clientPaymentMethod);
												document.getElementById('paymentStep').style.display = 'none';
											}, 4000);

											return; // Exit the function as payment is completed
										}

										// Payment not completed, continue polling
										setTimeout(checkPaymentStatus, 5000);
									} catch (error) {
										console.log(error);
									}
								}
								setTimeout(async () => {
									paymentLoader.style.display = 'none';
									completePayment.style.display = 'block';
									window.open(redirectUrl, '_blank');
									checkPaymentStatus();
								}, 2000)

							} else {
								displayToastify(result.message)
							}

						}
					}
					update();
					currentStep.classList.remove('active');
					nextStep.classList.add('active');

				});
			});


			prevButtons.forEach(button => {
				button.addEventListener('click', function () {
					const currentStep = button.closest('.step-content');
					const prevStepId = button.getAttribute('data-prev-step');
					const prevStep = document.getElementById(prevStepId);

					currentStep.classList.remove('active');
					prevStep.classList.add('active');

					currentActive--;
					if (currentActive < 1) {
						currentActive = 1;
					}

					update();
				});
			});

			// Buy Now Function Start
			const buyNowBtn = document.getElementById('buyNowProduct');
			buyNowBtn.addEventListener('click', (event) => {
				// check if user is loggedIn
				if (!isUserLoggedIn) {
					displayToastify('Please login to continue');
				} else {
					const paymentModal = new bootstrap.Modal(document.getElementById('paymentModal'));
					event.preventDefault();
					paymentModal.show();
					// cardDetails.classList.remove('d-none');
					// upiDetails.classList.add('d-none');
					// // updateProgressBar();
					// //close payment Page

					// document.getElementById('closePaymentPage').addEventListener('click', () => {
					//     paymentModal.hide();
					// })
				}
			})

			// const paymentMethodSelect = document.getElementById('paymentMethod');
			// const cardDetails = document.getElementById('cardDetails');
			// const upiDetails = document.getElementById('upiDetails');

			// //validate payment method
			// paymentMethodSelect.addEventListener('change', function () {
			//     if (this.value === 'card') {
			//         cardDetails.classList.remove('d-none');
			//         upiDetails.classList.add('d-none');
			//     } else if (this.value === 'upi') {
			//         cardDetails.classList.add('d-none');
			//         upiDetails.classList.remove('d-none');
			//     }
			// });


			function update() {
				wraps.forEach((wrap, index) => {
					if (index < currentActive) {
						wrap.classList.add('active')
					} else {
						wrap.classList.remove('active')
					}
				})

				const actives = document.querySelectorAll('.active')
				progress.style.width = (actives.length - 1) / (wraps.length - 1) * 80 + '%'

				// if(currentActive === 1) {
				//     back.disabled = true
				// } else if(currentActive === wraps.length) {
				//     next.disabled = true
				// } else {
				//     back.disabled = false
				//     next.disabled = false
				// }
			}

			//update Review Page
			const updateReviewStep = (clientordNumber, clientPaymentMethod) => {
				document.getElementById('orderNumber').textContent = clientordNumber;
				if (clientPaymentMethod == "UPI") {
					document.getElementById('paymentTypeImg').src = "../images/upi.jpg"
				}
				document.getElementById('paymentMethod').textContent = "Online " + clientPaymentMethod;
			}

			// add to cart functionality
			const cartBtn = document.getElementById('addToCart');
			cartBtn.addEventListener('click', async (event) => {
				event.preventDefault();
				const productName = cartBtn.getAttribute('data-product-name');
				if (isUserLoggedIn) {
					try {
						const response = await fetch('/Cart/addToCart', {
							method: "POST",
							headers: {
								'Content-Type': 'application/json'
							},
							body: JSON.stringify({
								productName: productName
							})
						})
						const result = await response.json();
						if (result.success) {
							displayToastify(result.message);
							// increase count in frontend
							const cartItemCountElement = parseInt(document.getElementById('cartItemCount').textContent);
							document.getElementById('cartItemCount').textContent = cartItemCountElement + 1;
						} else {
							displayToastify(result.message);
						}
					}
					catch (error) {
						console.log(error);
					}
				} else {
					//
					displayToastify("Please login first!!")
				}
			})
		</script>
		<%- include('newFooter'); -%>